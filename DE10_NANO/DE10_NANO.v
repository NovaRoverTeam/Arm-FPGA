
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE10_NANO(

	//////////// ADC //////////
	output		          		ADC_CONVST,
	output		          		ADC_SCK,
	output		          		ADC_SDI,
	input 		          		ADC_SDO,

	//////////// ARDUINO //////////
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,

	//////////// CLOCK //////////
	input 		          		FPGA_CLK1_50,
	input 		          		FPGA_CLK2_50,
	input 		          		FPGA_CLK3_50,

	//////////// HDMI //////////
	inout 		          		HDMI_I2C_SCL,
	inout 		          		HDMI_I2C_SDA,
	inout 		          		HDMI_I2S,
	inout 		          		HDMI_LRCLK,
	inout 		          		HDMI_MCLK,
	inout 		          		HDMI_SCLK,
	output		          		HDMI_TX_CLK,
	output		          		HDMI_TX_DE,
	output		    [23:0]		HDMI_TX_D,
	output		          		HDMI_TX_HS,
	input 		          		HDMI_TX_INT,
	output		          		HDMI_TX_VS,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [7:0]		LED,

	//////////// SW //////////
	input 		     [3:0]		SW,

	//////////// GPIO_0, GPIO connect to GPIO Default //////////
	inout 		    [35:0]		GPIO_0,

	//////////// GPIO_1, GPIO connect to GPIO Default //////////
	inout 		    [35:0]		GPIO_1
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
//reg [7:0] lights = 0;


wire out;


assign GPIO_1[0] = GPIO_1[3];
assign GPIO_1[1] = out;
assign GPIO_1[2] = FPGA_CLK1_50;
assign LED[0] = out;



digital_filter f0 (	.iClk(FPGA_CLK1_50),
							.iIn(GPIO_1[3]),
							.oOut(out));
							


/*
encoder_position u0 (.iClk(FPGA_CLK1_50), 
							.iEncoder(KEY[0]), 
							.iDirection(SW[0]), 
							.iRst(SW[1]), 
							.oPosition(LED[7:0]));




/*


assign LED = lights;
assign ARDUINO_IO [7:0] = lights;
//=======================================================
//  Structural coding
//=======================================================
always @ (posedge FPGA_CLK1_50)
begin

	reg last1;
	reg last2;
	reg current1;
	reg current2;
	
	last1 <= current1;
	current1 <= KEY[0];
	last2 <= current2;
	current2 <= KEY[1];
	
	if (current1==0 && last1==1) begin
		
		lights <= lights + 1;
	end else if (current2==0 && last2==1)begin
		lights <= lights - 1;
	end

end

*/
/*

endmodule

module encoder_position(iClk, iEncoder, iDirection, iRst, oPosition);
	input						iClk;
	input						iEncoder;
	input						iDirection;
	input						iRst;
	output reg	[7:0]	oPosition;
	
	/*always @ (iRst)
	begin
		if (iRst)
			oPosition <= 0;
	end*/
	/*
	always @ (iEncoder)
	begin
		if (iDirection && !iRst)
			oPosition <= oPosition + 1;
		else if (!iDirection && !iRst)
			oPosition <= oPosition -1;
		else
			oPosition <= 0;
	end
	
endmodule
	*/
	

	
endmodule

module digital_filter(iClk, iIn, oOut);
	input iClk, iIn;
	output reg oOut;
	parameter samples = 4095;
	// 511 seemed to fix wrist motor at constant 1V
	
	reg [11:0] count = 0;
	reg last_In;
	
	
	
	
	always @ (posedge iClk)
		begin
			
			
			if (last_In != iIn)
				begin
					count = 0;
				end
			else if (last_In == iIn && count < samples)
				begin
					count = count + 1;
				end
			
			if (count == samples)
				begin
					oOut = iIn;
					count = 0;
				end
				
			last_In = iIn;
		end
endmodule
